---
- name: Build infrastructure
  hosts: localhost
  connection: local
  vars_files:
    - vars/main.yml
  tasks:
    - assert:
        that: terraform_var_hcloud_token != ""
        fail_msg: "No Hetzner Cloud API token provided"

    - assert:
        that: terraform_var_ssh_key_name != ""
        fail_msg: "No Hetzner Cloud SSH key name provided"

    # create the tfvars file for future use directly through terraform
    - name: Create tfvars file
      ansible.builtin.copy:
        dest: "{{ terraform_project_dir }}/terraform.tfvars"
        content: |
          hcloud_token       = "{{ terraform_var_hcloud_token }}"
          bastion_username   = "{{ terraform_var_bastion_username }}"
          ssh_key_name       = "{{ terraform_var_ssh_key_name }}"
          network_ip_range   = "{{ terraform_var_network_ip_range }}"
          subnet_ip_range    = "{{ terraform_var_subnet_ip_range }}"
          loadbalancer_count = {{ terraform_var_loadbalancer_count }}
          server_node_count  = {{ terraform_var_server_node_count }}
          client_node_count  = {{ terraform_var_client_node_count }}

    # Terraform apply
    # - name: Deploy infrastructure with terraform
    #   community.general.terraform:
    #     overwrite_init: no
    #     force_init: yes
    #     project_path: "{{ terraform_project_dir }}"
    #     state: present

    # - name: Update inventory with inventory created by terraform
    #   ansible.builtin.meta: refresh_inventory

# - import_playbook: provision.yml
